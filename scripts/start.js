// Do this as the first thing so that any code reading it knows the right env.
process.env.BABEL_ENV = "development";
process.env.NODE_ENV = "development";

const Webpack = require("webpack");
const WebpackDevServer = require("webpack-dev-server");
const clearConsole = require("react-dev-utils/clearConsole");
const openBrowser = require("react-dev-utils/openBrowser");
const { choosePort, createCompiler, prepareUrls } = require("react-dev-utils/WebpackDevServerUtils");
const PackageJson = require("../package.json");
const WebpackDevConfig = require("../config/webpack.config.dev");

choosePort("127.0.0.1", 3000)
    .then((port) => {
        if (port === null) {
            return;
        }

        const urls = prepareUrls("http", "127.0.0.1", 3000);
        const compiler = createCompiler(Webpack, WebpackDevConfig, PackageJson.name, urls, true);
        // Serve webpack Assets generated by the compiler over a web sever.
        const serverConfig = {
            disableHostCheck: true,
            compress: true,
            hot: true,
            // It is important to tell WebpackDevServer to use the same "root" path
            // as we specified in the config. In development, we always serve from /.
            publicPath: WebpackDevConfig.output.publicPath,
            quiet: true,
            // Reportedly, this avoids CPU overload on some systems.
            // https://github.com/facebookincubator/create-react-app/issues/293
            watchOptions: {
                ignored: /node_modules/,
            },
            host: "127.0.0.1",
            overlay: false,
            historyApiFallback: {
                disableDotRule: true,
            },
        };
        const devServer = new WebpackDevServer(compiler, serverConfig);
        // Launch WebpackDevServer.
        devServer.listen(port, "127.0.0.1", (error) => {
            if (error) {
                return console.log(error);
            }
            const isInteractive = process.stdout.isTTY;
            if (isInteractive) {
                clearConsole();
            }
            console.log("Starting the development server...\n");
            openBrowser(urls.localUrlForBrowser);
        });
    })
    .catch((error) => {
        if (error && error.message) {
            console.log(error.message);
        }
        process.exit(1);
    });
